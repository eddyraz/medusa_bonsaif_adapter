(undo-tree-save-format-version . 1)
"9e6480287fedd40f80e8f98de4d94cd107a18347"
[nil nil nil nil (25182 25962 958004 46000) 0 nil]
([nil nil (("
" . 3308) (3036 . 3097) (#("
  defp check_number_requirements(server_response,number) do
" 3 7 (face font-lock-keyword-face) 8 33 (face font-lock-function-name-face) 58 60 (face font-lock-keyword-face)) . 3036) (2812 . 2818) (#("end



" 0 3 (face font-lock-keyword-face)) . 2812) (2698 . 2804) (#("      #end
      #else
      #Logger.error(\"Bonsaif Response: #{res.body}\")
      #{:error, res.body}

" 6 7 (face font-lock-comment-delimiter-face) 7 11 (face font-lock-comment-face) 17 18 (face font-lock-comment-delimiter-face) 18 23 (face font-lock-comment-face) 29 30 (face font-lock-comment-delimiter-face) 30 43 (face font-lock-comment-face) 43 44 (face font-lock-comment-face syntax-table (15)) 44 62 (face font-lock-comment-face) 62 63 (elixir-interpolation (nil #<marker at 2251 in medusa_bonsaif_adapter.ex> #<marker at 2251 in medusa_bonsaif_adapter.ex> #<marker at 2251 in medusa_bonsaif_adapter.ex> #<marker at 2251 in medusa_bonsaif_adapter.ex>) face font-lock-comment-face syntax-table (2)) 63 73 (face font-lock-comment-face) 73 74 (face font-lock-comment-face syntax-table (15)) 74 76 (face font-lock-comment-face) 82 83 (elixir-interpolation (nil #<marker at 2251 in medusa_bonsaif_adapter.ex> #<marker at 2251 in medusa_bonsaif_adapter.ex> #<marker at 2251 in medusa_bonsaif_adapter.ex> #<marker at 2251 in medusa_bonsaif_adapter.ex>) syntax-table (2)) 84 90 (face elixir-atom-face)) . 2698) (undo-tree-id1689 . -62) (undo-tree-id1690 . -73) (undo-tree-id1691 . -62) (undo-tree-id1692 . -73) (undo-tree-id1693 . -82) (undo-tree-id1694 . -101) (undo-tree-id1695 . -82) (undo-tree-id1696 . -101) (undo-tree-id1697 . -62) (undo-tree-id1698 . -73) (undo-tree-id1699 . -62) (undo-tree-id1700 . -73) (undo-tree-id1701 . -82) (undo-tree-id1702 . -101) (undo-tree-id1703 . -82) (undo-tree-id1704 . -101) (2586 . 2599) (#("      #else
" 6 7 (face font-lock-comment-delimiter-face) 7 12 (face font-lock-comment-face)) . 2586) (2392 . 2488) (#("      #if Regex.match?(~r/^(10|20|30[0-9])/,List.first(cuerpo_respuesta[\"result\"])[\"code\"]) do
" 6 7 (face font-lock-comment-delimiter-face) 7 72 (face font-lock-comment-face) 72 73 (face font-lock-comment-face syntax-table (15)) 73 79 (face font-lock-comment-face) 79 80 (face font-lock-comment-face syntax-table (15)) 80 83 (face font-lock-comment-face) 83 84 (face font-lock-comment-face syntax-table (15)) 84 88 (face font-lock-comment-face) 88 89 (face font-lock-comment-face syntax-table (15)) 89 95 (face font-lock-comment-face)) . 2392) (2283 . 2391) (#("      check_number_requirements(res,phone_number)
      #{:ok, cuerpo_respuesta} = Jason.decode(res.body)
" 56 57 (elixir-interpolation (nil #<marker at 2200 in medusa_bonsaif_adapter.ex> #<marker at 2200 in medusa_bonsaif_adapter.ex> #<marker at 2200 in medusa_bonsaif_adapter.ex> #<marker at 2200 in medusa_bonsaif_adapter.ex>) syntax-table (2)) 58 61 (face elixir-atom-face) 83 88 (face font-lock-type-face)) . 2283) (undo-tree-id1705 . -56) (undo-tree-id1706 . -80) (undo-tree-id1707 . -56) (undo-tree-id1708 . -80) (2074 . 2157) (#("
#     with {:true,Regex.match?(~r/^(10|20|30[0-9])/, \"#{res.status_code}\")} <-
" 1 7 (face font-lock-comment-delimiter-face) 7 12 (face font-lock-comment-face) 12 54 (face font-lock-comment-face) 54 55 (face font-lock-comment-face syntax-table (15)) 55 56 (elixir-interpolation (nil #<marker at 2074 in medusa_bonsaif_adapter.ex> #<marker at 2074 in medusa_bonsaif_adapter.ex> #<marker at 2074 in medusa_bonsaif_adapter.ex> #<marker at 2074 in medusa_bonsaif_adapter.ex>) face font-lock-comment-face syntax-table (2)) 56 73 (face font-lock-comment-face) 73 74 (face font-lock-comment-face syntax-table (15)) 74 80 (face font-lock-comment-face)) . 2074) (undo-tree-id1709 . -55) (undo-tree-id1710 . -73) (undo-tree-id1711 . -55) (undo-tree-id1712 . -73) (1994 . 2039) (#("  def parse_response(res,sending_number) do

" 2 5 (face font-lock-keyword-face) 6 20 (face font-lock-function-name-face) 41 43 (face font-lock-keyword-face)) . 1994) (1075 . 1098) (#("         Accept: \"*/*\",
" 9 16 (face elixir-atom-face) 17 18 (face font-lock-string-face syntax-table (15)) 18 21 (face font-lock-string-face) 21 22 (face font-lock-string-face syntax-table (15))) . 1075) ("
" . 982) ("
" . 965) ("
" . 942) (858 . 898) (#("  defp send_request(url,from_phone) do
" 2 6 (face font-lock-keyword-face) 7 19 (face font-lock-function-name-face) 36 38 (face font-lock-keyword-face)) . 858) (542 . 581) (#("    send_request(url,params[\"phone\"])
" 0 28 (fontified t) 28 29 (fontified t syntax-table (15) face font-lock-string-face) 29 34 (fontified t face font-lock-string-face) 34 35 (fontified t syntax-table (15) face font-lock-string-face) 35 38 (fontified t)) . 542) (undo-tree-id1713 . -38) (undo-tree-id1714 . -38) (473 . 489) (#("    url =url()
" 0 4 (fontified t) 4 7 (fontified t face font-lock-variable-name-face) 7 15 (fontified t)) . 473) (undo-tree-id1715 . -15) (undo-tree-id1716 . -15) (388 . 417) (#("      #\"account\" => \"Miio\",
" 0 6 (fontified t) 6 7 (fontified t face font-lock-comment-delimiter-face) 7 8 (fontified t syntax-table (15) face font-lock-comment-face) 8 15 (fontified t face font-lock-comment-face) 15 16 (fontified t syntax-table (15) face font-lock-comment-face) 16 20 (fontified t face font-lock-comment-face) 20 21 (fontified t syntax-table (15) face font-lock-comment-face) 21 25 (fontified t face font-lock-comment-face) 25 26 (fontified t syntax-table (15) face font-lock-comment-face) 26 28 (fontified t face font-lock-comment-face)) . 388) (undo-tree-id1717 . -28) (undo-tree-id1718 . -28) (#("
" 0 1 (fontified t)) . 278) (undo-tree-id1719 . -1) (undo-tree-id1720 . -1) (228 . 262) (#("

  def send_sms(phone,message) do




" 0 4 (fontified t) 4 7 (fontified t face font-lock-keyword-face) 7 8 (fontified t) 8 16 (fontified t face font-lock-function-name-face) 16 32 (fontified t) 32 34 (fontified t face font-lock-keyword-face) 34 39 (fontified t)) . 228) (undo-tree-id1721 . -1) (undo-tree-id1722 . -1) (undo-tree-id1723 . -2) (undo-tree-id1724 . -2) (undo-tree-id1725 . -35) (undo-tree-id1726 . -35) (undo-tree-id1727 . -36) (undo-tree-id1728 . -36) (undo-tree-id1729 . -37) (undo-tree-id1730 . -37) (undo-tree-id1731 . -38) (undo-tree-id1732 . -38) (undo-tree-id1733 . -39) (undo-tree-id1734 . -39)) ((228 . 267) (#("  def send_sms(phone, message) do
" 0 2 (fontified t) 2 5 (fontified t face font-lock-keyword-face) 5 6 (fontified t) 6 14 (fontified t face font-lock-function-name-face) 14 31 (fontified t) 31 33 (fontified t face font-lock-keyword-face) 33 34 (fontified t)) . 228) (278 . 279) (388 . 416) (#("      # \"account\" => \"Miio\",
" 6 8 (face font-lock-comment-delimiter-face) 8 9 (syntax-table (15) face font-lock-comment-face) 9 16 (face font-lock-comment-face) 16 17 (syntax-table (15) face font-lock-comment-face) 17 21 (face font-lock-comment-face) 21 22 (syntax-table (15) face font-lock-comment-face) 22 26 (face font-lock-comment-face) 26 27 (syntax-table (15) face font-lock-comment-face) 27 29 (face font-lock-comment-face)) . 388) (473 . 488) (#("    url = url()
" 4 7 (face font-lock-variable-name-face)) . 473) (542 . 580) (#("    send_request(url, params[\"phone\"])
" 29 30 (syntax-table (15) face font-lock-string-face) 30 35 (face font-lock-string-face) 35 36 (syntax-table (15) face font-lock-string-face)) . 542) (858 . 897) (#("  defp send_request(url, from_phone) do
" 2 6 (face font-lock-keyword-face) 7 19 (face font-lock-function-name-face) 37 39 (face font-lock-keyword-face)) . 858) (942 . 943) (965 . 966) (982 . 983) (1075 . 1099) (#("        Accept: \"*/*\",
" 8 15 (face elixir-atom-face) 16 17 (syntax-table (15) face font-lock-string-face) 17 20 (face font-lock-string-face) 20 21 (syntax-table (15) face font-lock-string-face)) . 1075) (1994 . 2039) (#("  def parse_response(res, sending_number) do
" 2 5 (face font-lock-keyword-face) 6 20 (face font-lock-function-name-face) 42 44 (face font-lock-keyword-face)) . 1994) (2074 . 2154) (#("    #     with {:true,Regex.match?(~r/^(10|20|30[0-9])/, \"#{res.status_code}\")} <-
" 4 10 (face font-lock-comment-delimiter-face) 10 57 (face font-lock-comment-face) 57 58 (face font-lock-comment-face syntax-table (15)) 58 59 (elixir-interpolation (nil #<marker at 2074 in medusa_bonsaif_adapter.ex> #<marker at 2074 in medusa_bonsaif_adapter.ex> #<marker at 2074 in medusa_bonsaif_adapter.ex> #<marker at 2074 in medusa_bonsaif_adapter.ex>) face font-lock-comment-face syntax-table (2)) 59 76 (face font-lock-comment-face) 76 77 (face font-lock-comment-face syntax-table (15)) 77 83 (face font-lock-comment-face)) . 2074) (undo-tree-id1668 . -58) (undo-tree-id1669 . -76) (undo-tree-id1670 . -58) (undo-tree-id1671 . -76) (undo-tree-id1672 . -58) (undo-tree-id1673 . -76) (undo-tree-id1674 . -58) (undo-tree-id1675 . -76) (2283 . 2389) (#("      check_number_requirements(res, phone_number)
      # {:ok, cuerpo_respuesta} = Jason.decode(res.body)
" 57 59 (face font-lock-comment-delimiter-face) 59 108 (face font-lock-comment-face)) . 2283) (undo-tree-id1676 . -51) (2392 . 2487) (#("      # if Regex.match?(~r/^(10|20|30[0-9])/,List.first(cuerpo_respuesta[\"result\"])[\"code\"]) do
" 6 8 (face font-lock-comment-delimiter-face) 8 73 (face font-lock-comment-face) 73 74 (face font-lock-comment-face syntax-table (15)) 74 80 (face font-lock-comment-face) 80 81 (face font-lock-comment-face syntax-table (15)) 81 84 (face font-lock-comment-face) 84 85 (face font-lock-comment-face syntax-table (15)) 85 89 (face font-lock-comment-face) 89 90 (face font-lock-comment-face syntax-table (15)) 90 96 (face font-lock-comment-face)) . 2392) (2586 . 2598) (#("      # else
" 6 8 (face font-lock-comment-delimiter-face) 8 13 (face font-lock-comment-face)) . 2586) (2698 . 2801) (#("      # end
      # else
      # Logger.error(\"Bonsaif Response: #{res.body}\")
      # {:error, res.body}
" 6 8 (face font-lock-comment-delimiter-face) 8 12 (face font-lock-comment-face) 18 20 (face font-lock-comment-delimiter-face) 20 25 (face font-lock-comment-face) 31 33 (face font-lock-comment-delimiter-face) 33 46 (face font-lock-comment-face) 46 47 (face font-lock-comment-face syntax-table (15)) 47 65 (face font-lock-comment-face) 65 66 (elixir-interpolation (nil #<marker at 2251 in medusa_bonsaif_adapter.ex> #<marker at 2251 in medusa_bonsaif_adapter.ex> #<marker at 2251 in medusa_bonsaif_adapter.ex> #<marker at 2251 in medusa_bonsaif_adapter.ex>) face font-lock-comment-face syntax-table (2)) 66 76 (face font-lock-comment-face) 76 77 (face font-lock-comment-face syntax-table (15)) 77 79 (face font-lock-comment-face) 85 87 (face font-lock-comment-delimiter-face) 87 106 (face font-lock-comment-face)) . 2698) (undo-tree-id1677 . -65) (undo-tree-id1678 . -76) (undo-tree-id1679 . -65) (undo-tree-id1680 . -76) (undo-tree-id1681 . -65) (undo-tree-id1682 . -76) (undo-tree-id1683 . -65) (undo-tree-id1684 . -76) (2812 . 2819) (#("  end
" 0 2 (fontified t) 2 5 (fontified t face font-lock-keyword-face) 5 6 (fontified t)) . 2812) (undo-tree-id1685 . -6) (undo-tree-id1686 . -6) (3036 . 3097) (#("  defp check_number_requirements(server_response, number) do
" 0 2 (fontified t) 2 6 (fontified t face font-lock-keyword-face) 6 7 (fontified t) 7 32 (fontified t face font-lock-function-name-face) 32 50 (fontified t) 50 58 (fontified t) 58 60 (fontified t face font-lock-keyword-face) 60 61 (fontified t)) . 3036) (undo-tree-id1687 . -61) (undo-tree-id1688 . -61) (3308 . 3309)) (25182 25965 654529 711000) 0 nil])
([nil nil ((3144 . 3151) (t 25182 25975 384979 637000)) nil (25182 26474 184797 569000) 0 nil] [nil nil ((3267 . 3272)) ((#("\" <> " 0 1 (fontified t syntax-table (15) face font-lock-string-face) 1 5 (fontified t)) . 3267)) (25182 25931 722713 681000) 0 nil] [nil nil ((#("if " 0 1 (fontified t face font-lock-keyword-face) 1 2 (fontified t face font-lock-keyword-face) 2 3 (fontified t)) . 3101)) ((3101 . 3104)) (25182 25942 379627 62000) 0 nil] [nil nil ((3268 . 3272)) ((#("Jaas" 0 1 (fontified t face font-lock-string-face) 1 2 (fontified t face font-lock-string-face) 2 3 (fontified t face font-lock-string-face) 3 4 (fontified t face font-lock-string-face)) . 3268) (undo-tree-id1739 . -2) (undo-tree-id1740 . -2) (undo-tree-id1741 . -4) (undo-tree-id1742 . -4) (undo-tree-id1743 . -2) (undo-tree-id1744 . -2) (undo-tree-id1745 . -2) (undo-tree-id1746 . -2) (undo-tree-id1747 . -2) (undo-tree-id1748 . -2) (undo-tree-id1749 . -4) (undo-tree-id1750 . -4)) (25182 25965 478051 387000) 0 nil])
([nil nil ((3151 . 3157)) nil (25182 26474 184795 646000) 0 nil])
([nil nil ((3273 . 3285)) ((#("Jason.decode" 0 5 (fontified t face font-lock-type-face) 5 12 (fontified t)) . 3273) (undo-tree-id1425 . -12) (undo-tree-id1426 . -12) (undo-tree-id1427 . -12) (undo-tree-id1428 . -12) (undo-tree-id1429 . -12) (undo-tree-id1430 . -12) (undo-tree-id1431 . -12) (undo-tree-id1432 . -12) (undo-tree-id1433 . -12) (undo-tree-id1434 . -12) (undo-tree-id1435 . -12) (undo-tree-id1436 . -12) (undo-tree-id1437 . -12) (undo-tree-id1438 . -12) (undo-tree-id1439 . -12) (undo-tree-id1440 . -12) (undo-tree-id1441 . -12) (undo-tree-id1442 . -12)) (25182 25930 553512 164000) 0 nil])
([nil nil ((3101 . 3106)) ((#("with " 0 4 (fontified t face font-lock-keyword-face) 4 5 (fontified t)) . 3101)) (25182 25941 874145 881000) 0 nil])
([nil nil ((#("as" 0 1 (fontified t face font-lock-string-face) 1 2 (fontified t face font-lock-string-face)) . 3270) (undo-tree-id1735 . -2) (undo-tree-id1736 . -2)) ((3270 . 3272)) (25182 25965 309109 455000) 0 nil])
([nil nil ((#("n" 0 1 (fontified t)) . -3154) (undo-tree-id1814 . -1) (#("u" 0 1 (fontified t)) . -3155) (undo-tree-id1815 . -1) (#("m" 0 1 (fontified t)) . -3156) (undo-tree-id1816 . -1) 3157) nil (25182 26474 184793 71000) 0 nil])
([nil nil ((3285 . 3286)) ((#("(" 0 1 (fontified t)) . 3285) (undo-tree-id1411 . -1) (undo-tree-id1412 . -1) (undo-tree-id1413 . -1) (undo-tree-id1414 . -1) (undo-tree-id1415 . -1) (undo-tree-id1416 . -1) (undo-tree-id1417 . -1) (undo-tree-id1418 . -1) (undo-tree-id1419 . -1) (undo-tree-id1420 . -1) (undo-tree-id1421 . -1) (undo-tree-id1422 . -1) (undo-tree-id1423 . -1) (undo-tree-id1424 . -1)) (25182 25930 367311 726000) 0 nil])
([nil nil ((#("== " 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t)) . 3138)) ((3138 . 3141)) (25182 25941 840725 856000) 0 nil])
([nil nil ((3270 . 3273)) ((#("son" 0 1 (fontified t face font-lock-string-face) 1 2 (fontified t face font-lock-string-face) 2 3 (fontified t face font-lock-string-face)) . 3270) (undo-tree-id1737 . -3) (undo-tree-id1738 . -3)) (25182 25964 922646 725000) 0 nil])
([nil nil ((3154 . 3166)) nil (25182 26474 184786 188000) 0 nil])
([nil nil ((3309 . 3310)) ((#(")" 0 1 (fontified t)) . 3309)) (25182 25930 182170 289000) 0 nil])
([nil nil ((3138 . 3140)) ((#("<-" 0 2 (fontified t)) . 3138) (undo-tree-id1457 . -2) (undo-tree-id1458 . -2)) (25182 25941 808115 666000) 0 nil])
([nil nil ((#("Jason" 0 1 (fontified t face font-lock-string-face) 1 2 (fontified t face font-lock-string-face) 2 3 (fontified t face font-lock-string-face) 3 4 (fontified t face font-lock-string-face) 4 5 (fontified t face font-lock-string-face)) . 3268) (undo-tree-id1620 . -2) (undo-tree-id1621 . -2) (undo-tree-id1622 . -2) (undo-tree-id1623 . -2) (undo-tree-id1624 . -2) (undo-tree-id1625 . -2) (undo-tree-id1626 . -5) (undo-tree-id1627 . -5)) ((3268 . 3273)) (25182 25961 134627 585000) 0 nil])
([nil nil ((3166 . 3174)) nil (25182 26474 184784 645000) 0 nil])
([nil nil ((3286 . 3287)) ((#("\"" 0 1 (fontified t syntax-table (15) face font-lock-string-face)) . 3286) (undo-tree-id1401 . -1) (undo-tree-id1402 . -1) (undo-tree-id1403 . -1) (undo-tree-id1404 . -1) (undo-tree-id1405 . -1) (undo-tree-id1406 . -1) (undo-tree-id1407 . -1) (undo-tree-id1408 . -1) (undo-tree-id1409 . -1) (undo-tree-id1410 . -1)) (25182 25930 10714 137000) 0 nil])
([nil nil ((3140 . 3141)) ((#(" " 0 1 (fontified t)) . 3140)) (25182 25941 775304 449000) 0 nil])
([nil nil ((#("f SMS Delivery Error " 0 1 (fontified t face font-lock-string-face) 1 2 (fontified t face font-lock-string-face) 2 3 (fontified t face font-lock-string-face) 3 4 (fontified t face font-lock-string-face) 4 5 (fontified t face font-lock-string-face) 5 6 (fontified t face font-lock-string-face) 6 7 (fontified t face font-lock-string-face) 7 8 (fontified t face font-lock-string-face) 8 9 (fontified t face font-lock-string-face) 9 10 (fontified t face font-lock-string-face) 10 11 (fontified t face font-lock-string-face) 11 12 (fontified t face font-lock-string-face) 12 13 (fontified t face font-lock-string-face) 13 14 (fontified t face font-lock-string-face) 14 15 (fontified t face font-lock-string-face) 15 16 (fontified t face font-lock-string-face) 16 17 (fontified t face font-lock-string-face) 17 18 (fontified t face font-lock-string-face) 18 19 (fontified t face font-lock-string-face) 19 20 (fontified t face font-lock-string-face) 20 21 (fontified t face font-lock-string-face)) . 3247) (undo-tree-id1628 . -21) (undo-tree-id1629 . -21) (undo-tree-id1630 . -21) (undo-tree-id1631 . -21) (undo-tree-id1632 . -21) (undo-tree-id1633 . -21) (undo-tree-id1634 . -21) (undo-tree-id1635 . -21) (undo-tree-id1636 . -21) (undo-tree-id1637 . -21)) ((3247 . 3268)) (25182 25960 667182 506000) 0 nil])
([nil nil ((3172 . 3173)) nil (25182 26474 184782 812000) 0 nil])
([nil nil ((3310 . 3311)) ((#("\"" 0 1 (fontified t syntax-table (15) face font-lock-string-face)) . 3310)) (25182 25929 841018 869000) 0 nil])
([nil nil ((3106 . 3107)) ((#("{" 0 1 (fontified t)) . 3106)) (25182 25941 743607 406000) 0 nil])
([nil nil ((#("Logger.error(\"Bonsai" 0 1 (fontified t face font-lock-type-face) 1 2 (fontified t face font-lock-type-face) 2 3 (fontified t face font-lock-type-face) 3 4 (fontified t face font-lock-type-face) 4 5 (fontified t face font-lock-type-face) 5 6 (fontified t face font-lock-type-face) 6 7 (fontified t) 7 8 (fontified t) 8 9 (fontified t) 9 10 (fontified t) 10 11 (fontified t) 11 12 (fontified t) 12 13 (fontified t) 13 14 (fontified t syntax-table (15) face font-lock-string-face) 14 15 (fontified t face font-lock-string-face) 15 16 (fontified t face font-lock-string-face) 16 17 (fontified t face font-lock-string-face) 17 18 (fontified t face font-lock-string-face) 18 19 (fontified t face font-lock-string-face) 19 20 (fontified t face font-lock-string-face)) . 3227) (undo-tree-id1638 . -20) (undo-tree-id1639 . -20) (undo-tree-id1640 . -20) (undo-tree-id1641 . -20) (undo-tree-id1642 . -20) (undo-tree-id1643 . -20) (undo-tree-id1644 . -20) (undo-tree-id1645 . -20) (undo-tree-id1646 . -20) (undo-tree-id1647 . -20) (undo-tree-id1648 . -20) (undo-tree-id1649 . -20)) ((3227 . 3247)) (25182 25959 125120 432000) 0 nil])
([nil nil ((3174 . 3180)) nil (25182 26474 184781 239000) 0 nil])
([nil nil ((#("\"" 0 1 (fontified t syntax-table (15) face font-lock-string-face)) . 3312)) ((3312 . 3313)) (25182 25929 681918 840000) 0 nil])
([nil nil ((3138 . 3139)) ((#("}" 0 1 (fontified t)) . 3138)) (25182 25941 728975 950000) 0 nil])
([nil nil ((#("\")" 0 1 (fontified t syntax-table (15) face font-lock-string-face) 1 2 (fontified t face font-lock-string-face)) . 3250)) ((3250 . 3252)) (25182 25948 672415 608000) 0 nil])
([nil nil ((3180 . 3181)) nil (25182 26474 184779 475000) 0 nil])
([nil nil ((3286 . 3298)) ((#("to_charlist(" 0 12 (fontified t)) . 3286)) (25182 25929 499637 371000) 0 nil])
([nil nil ((3146 . 3147)) ((#("," 0 1 (fontified nil)) . 3146) (undo-tree-id1453 . -1) (undo-tree-id1454 . -1) (undo-tree-id1455 . -1) (undo-tree-id1456 . -1)) (25182 25941 720503 318000) 0 nil])
([nil nil ((#("}" 0 1 (fontified t)) . 3249) (undo-tree-id1503 . -1) (undo-tree-id1504 . -1) (undo-tree-id1505 . -1) (undo-tree-id1506 . -1) (undo-tree-id1507 . -1) (undo-tree-id1508 . -1) (undo-tree-id1509 . -1) (undo-tree-id1510 . -1) (undo-tree-id1511 . -1) (undo-tree-id1512 . -1) (undo-tree-id1513 . -1) (undo-tree-id1514 . -1) (undo-tree-id1515 . -1) (undo-tree-id1516 . -1) (undo-tree-id1517 . -1) (undo-tree-id1518 . -1) (undo-tree-id1519 . -1) (undo-tree-id1520 . -1) (undo-tree-id1521 . -1) (undo-tree-id1522 . -1) (undo-tree-id1523 . -1) (undo-tree-id1524 . -1) (undo-tree-id1525 . -1) (undo-tree-id1526 . -1)) ((3249 . 3250)) (25182 25947 243345 944000) 0 nil])
([nil nil ((#("," 0 1 (fontified t)) . -3180) (undo-tree-id1813 . -1) 3181) nil (25182 26474 184777 632000) 0 nil])
([nil nil ((3324 . 3325)) ((#(")" 0 1 (fontified t)) . 3324) (t 25182 25772 266244 869000)) (25182 25928 813364 491000) 0 nil])
([nil nil ((3147 . 3154)) ((#("
      " 0 1 (fontified t) 1 7 (fontified t)) . 3147) (undo-tree-id1449 . -7) (undo-tree-id1450 . -7) (undo-tree-id1451 . -1) (undo-tree-id1452 . -1)) (25182 25941 643010 311000) 0 nil])
nil
([nil nil ((3174 . 3176)) nil (25182 26474 184773 865000) 0 nil])
nil
([nil nil ((3154 . 3159)) ((#("   {}" 0 3 (fontified t) 3 4 (fontified t) 4 5 (fontified t)) . 3154) (undo-tree-id1447 . -4) (undo-tree-id1448 . -4)) (25182 25941 608137 59000) 0 nil])
([nil nil ((3176 . 3177)) nil (25182 26474 184772 352000) 0 nil])
([nil nil ((3158 . 3166)) ((#("number[]" 0 5 (fontified t) 5 6 (fontified t) 6 7 (fontified t) 7 8 (fontified t)) . 3158)) (25182 25941 575070 465000) 0 nil])
([nil nil ((#("\"" 0 1 (fontified t syntax-table (15) face font-lock-string-face)) . -3174) (undo-tree-id1810 . -1) (#("\"" 0 1 (fontified t syntax-table (15) face font-lock-string-face)) . -3175) (undo-tree-id1811 . -1) (#("," 0 1 (fontified t)) . -3176) (undo-tree-id1812 . -1) 3177) nil (25182 26474 184769 607000) 0 nil])
([nil nil ((3158 . 3164)) ((#("Strong" 0 3 (fontified t face font-lock-type-face) 3 4 (fontified t face font-lock-type-face) 4 5 (fontified t face font-lock-type-face) 5 6 (fontified t face font-lock-type-face)) . 3158) (undo-tree-id1445 . -3) (undo-tree-id1446 . -3)) (25182 25941 541603 92000) 0 nil])
([nil nil ((3180 . 3183)) nil (25182 26474 184763 75000) 0 nil])
([nil nil ((#("ong" 0 1 (fontified t face font-lock-type-face) 1 2 (fontified t face font-lock-type-face) 2 3 (fontified t face font-lock-type-face)) . 3161)) ((3161 . 3164)) (25182 25941 509551 957000) 0 nil])
([nil nil ((3181 . 3182)) nil (25182 26474 184761 472000) 0 nil])
([nil nil ((3161 . 3171)) ((#("ing.slice(" 0 3 (fontified t face font-lock-type-face) 3 10 (fontified t)) . 3161)) (25182 25941 475688 673000) 0 nil])
([nil nil ((3184 . 3185)) nil (25182 26474 184759 818000) 0 nil])
([nil nil ((#("r[]" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t)) . 3176)) ((3176 . 3179)) (25182 25941 440637 198000) 0 nil])
([nil nil ((3154 . 3155)) nil (25182 26474 184758 286000) 0 nil])
([nil nil ((3176 . 3178)) ((#("r)" 0 2 (fontified t)) . 3176)) (25182 25941 407193 239000) 0 nil])
([nil nil ((3187 . 3190)) nil (25182 26474 184756 823000) 0 nil])
([nil nil ((#("," 0 1 (fontified t)) . 3146)) ((3146 . 3147)) (25182 25941 374270 43000) 0 nil])
([nil nil ((3104 . 3105)) nil (25182 26474 184755 140000) 0 nil])
([nil nil ((3146 . 3147)) ((#("o" 0 1 (fontified t)) . 3146)) (25182 25941 340642 800000) 0 nil])
([nil nil ((#("(" 0 1 (fontified t)) . -3104) (undo-tree-id1809 . -1) 3105) nil (25182 26474 184753 376000) 0 nil])
([nil nil ((#("o" 0 1 (fontified t)) . 3146)) ((3146 . 3147)) (25182 25941 307757 656000) 0 nil])
([nil nil ((#("=" 0 1 (fontified t)) . -3136) (undo-tree-id1808 . -1) 3137) nil (25182 26474 184749 900000) 0 nil])
([nil nil ((3146 . 3148)) ((#("di" 0 1 (fontified t) 1 2 (fontified t)) . 3146) (undo-tree-id1443 . -1) (undo-tree-id1444 . -1)) (25182 25941 273830 423000) 0 nil])
([nil nil ((3136 . 3137)) nil (25182 26474 184746 624000) 0 nil])
([nil nil ((#("i" 0 1 (fontified t)) . 3147)) ((3147 . 3148)) (25182 25941 238461 173000) 0 nil])
([nil nil ((#("Logger.error(\"Bonsaif SMS Delivery Error #{server_response.body}\")" 0 1 (fontified t face font-lock-type-face) 1 2 (fontified t face font-lock-type-face) 2 3 (fontified t face font-lock-type-face) 3 4 (fontified t face font-lock-type-face) 4 5 (fontified t face font-lock-type-face) 5 6 (fontified t face font-lock-type-face) 6 7 (fontified t) 7 8 (fontified t) 8 9 (fontified t) 9 10 (fontified t) 10 11 (fontified t) 11 12 (fontified t) 12 13 (fontified t) 13 14 (syntax-table (15) fontified t face font-lock-string-face) 14 15 (fontified t face font-lock-string-face) 15 16 (fontified t face font-lock-string-face) 16 17 (fontified t face font-lock-string-face) 17 18 (fontified t face font-lock-string-face) 18 19 (fontified t face font-lock-string-face) 19 20 (fontified t face font-lock-string-face) 20 21 (fontified t face font-lock-string-face) 21 22 (fontified t face font-lock-string-face) 22 23 (fontified t face font-lock-string-face) 23 24 (fontified t face font-lock-string-face) 24 25 (fontified t face font-lock-string-face) 25 26 (fontified t face font-lock-string-face) 26 27 (fontified t face font-lock-string-face) 27 28 (fontified t face font-lock-string-face) 28 29 (fontified t face font-lock-string-face) 29 30 (fontified t face font-lock-string-face) 30 31 (fontified t face font-lock-string-face) 31 32 (fontified t face font-lock-string-face) 32 33 (fontified t face font-lock-string-face) 33 34 (fontified t face font-lock-string-face) 34 35 (fontified t face font-lock-string-face) 35 36 (fontified t face font-lock-string-face) 36 37 (fontified t face font-lock-string-face) 37 38 (fontified t face font-lock-string-face) 38 39 (fontified t face font-lock-string-face) 39 40 (fontified t face font-lock-string-face) 40 41 (fontified t face font-lock-string-face) 41 42 (elixir-interpolation (t #<marker at 2754 in medusa_bonsaif_adapter.ex> #<marker at 2754 in medusa_bonsaif_adapter.ex> #<marker at 2754 in medusa_bonsaif_adapter.ex> #<marker at 2754 in medusa_bonsaif_adapter.ex>) syntax-table (2) fontified t face font-lock-variable-name-face) 42 50 (fontified t face font-lock-variable-name-face) 50 63 (fontified t face font-lock-variable-name-face) 63 64 (fontified t face font-lock-variable-name-face) 64 65 (syntax-table (15) fontified t face font-lock-string-face) 65 66 (fontified t)) . 3273) (undo-tree-id1796 . -41) (undo-tree-id1797 . -66) (undo-tree-id1798 . -66) (undo-tree-id1799 . -41) (undo-tree-id1800 . -64) (undo-tree-id1801 . -41) (undo-tree-id1802 . -64) (undo-tree-id1803 . -66) (undo-tree-id1804 . 1) (undo-tree-id1805 . -66) (undo-tree-id1806 . 54) (undo-tree-id1807 . -13) 3339) nil (25182 26474 184743 207000) 0 nil])
([nil nil ((3147 . 3148)) ((#("o" 0 1 (fontified t face font-lock-keyword-face)) . 3147)) (25182 25940 735595 88000) 0 nil])
([nil nil ((3142 . 3145)) nil (25182 26474 184649 442000) 0 nil])
([nil nil ((3149 . 3150)) ((#("#" 0 1 (fontified t face font-lock-comment-delimiter-face)) . 3149)) (25182 25939 915661 422000) 0 nil])
([nil nil ((3147 . 3154)) nil (25182 26474 184647 138000) 0 nil])
nil
([nil nil ((nil rear-nonsticky nil 3219 . 3220) (nil fontified nil 3219 . 3220) (nil fontified nil 3218 . 3219) (nil fontified nil 3217 . 3218) (nil fontified nil 3204 . 3217) (nil fontified nil 3196 . 3204) (nil fontified nil 3195 . 3196) (nil fontified nil 3194 . 3195) (nil fontified nil 3193 . 3194) (nil fontified nil 3192 . 3193) (nil fontified nil 3191 . 3192) (nil fontified nil 3190 . 3191) (nil fontified nil 3189 . 3190) (nil fontified nil 3188 . 3189) (nil fontified nil 3187 . 3188) (nil fontified nil 3186 . 3187) (nil fontified nil 3185 . 3186) (nil fontified nil 3184 . 3185) (nil fontified nil 3183 . 3184) (nil fontified nil 3182 . 3183) (nil fontified nil 3181 . 3182) (nil fontified nil 3180 . 3181) (nil fontified nil 3179 . 3180) (nil fontified nil 3178 . 3179) (nil fontified nil 3177 . 3178) (nil fontified nil 3176 . 3177) (nil fontified nil 3175 . 3176) (nil fontified nil 3174 . 3175) (nil fontified nil 3173 . 3174) (nil fontified nil 3172 . 3173) (nil fontified nil 3171 . 3172) (nil fontified nil 3170 . 3171) (nil fontified nil 3169 . 3170) (nil fontified nil 3168 . 3169) (nil fontified nil 3167 . 3168) (nil fontified nil 3166 . 3167) (nil fontified nil 3165 . 3166) (nil fontified nil 3164 . 3165) (nil fontified nil 3163 . 3164) (nil fontified nil 3162 . 3163) (nil fontified nil 3161 . 3162) (nil fontified nil 3160 . 3161) (nil fontified nil 3159 . 3160) (nil fontified nil 3158 . 3159) (nil fontified nil 3157 . 3158) (nil fontified nil 3156 . 3157) (nil fontified nil 3155 . 3156) (nil fontified nil 3154 . 3155) (3154 . 3220)) nil (25182 26474 184640 946000) 0 nil])
([nil nil ((#("!String.starts_with?(number,\"53\")" 0 1 (fontified t) 1 7 (fontified t) 7 21 (fontified t) 21 28 (fontified t) 28 29 (syntax-table (15) fontified t face font-lock-string-face) 29 31 (fontified t face font-lock-string-face) 31 32 (syntax-table (15) fontified t face font-lock-string-face) 32 33 (fontified t)) . 3230) (undo-tree-id1790 . -33) (undo-tree-id1791 . -33) (undo-tree-id1792 . 1) (undo-tree-id1793 . -33) (undo-tree-id1794 . 13) (undo-tree-id1795 . -21) 3263) nil (25182 26474 184620 407000) 0 nil])
([nil nil ((nil rear-nonsticky nil 3177 . 3178) (nil fontified nil 3177 . 3178) (nil fontified nil 3176 . 3177) (nil fontified nil 3174 . 3176) (nil fontified nil 3173 . 3174) (nil fontified nil 3166 . 3173) (nil fontified nil 3152 . 3166) (nil fontified nil 3146 . 3152) (nil fontified nil 3145 . 3146) (3145 . 3178)) nil (25182 26474 184609 577000) 0 nil])
([nil nil ((3178 . 3179)) nil (25182 26474 184603 947000) 0 nil])
([nil nil ((#("i" 0 1 (fontified t)) . -3261) (undo-tree-id1781 . -1) (undo-tree-id1782 . -1) (#("f" 0 1 (fontified t face font-lock-keyword-face)) . -3262) (undo-tree-id1783 . -1) (undo-tree-id1784 . -1) (#(" " 0 1 (fontified t)) . -3263) (undo-tree-id1785 . -1) (undo-tree-id1786 . -1) (#(" " 0 1 (fontified t)) . -3264) (undo-tree-id1787 . -1) (#("d" 0 1 (fontified t)) . -3265) (undo-tree-id1788 . -1) (#("o" 0 1 (fontified t face font-lock-keyword-face)) . -3266) (undo-tree-id1789 . -1) 3267) nil (25182 26474 184600 79000) 0 nil])
([nil nil ((#("{:ok, cuerpo_respuesta} = Jason.decode(server_response.body)" 0 1 (fontified t) 1 4 (fontified t face elixir-atom-face) 4 17 (fontified t) 17 26 (fontified t) 26 31 (fontified t face font-lock-type-face) 31 60 (fontified t)) . 3268) (undo-tree-id1775 . -60) (undo-tree-id1776 . 1) (undo-tree-id1777 . -60) (undo-tree-id1778 . 22) (undo-tree-id1779 . -39) (undo-tree-id1780 . -60) 3328) nil (25182 26474 184582 927000) 0 nil])
([nil nil ((3277 . 3284)) nil (25182 26474 184572 959000) 0 nil])
([nil nil ((nil rear-nonsticky nil 3343 . 3344) (nil fontified nil 3315 . 3344) (nil fontified nil 3310 . 3315) (nil fontified nil 3301 . 3310) (nil fontified nil 3288 . 3301) (nil fontified nil 3285 . 3288) (nil fontified nil 3284 . 3285) (3284 . 3344)) nil (25182 26474 184570 714000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 3261) (undo-tree-id1771 . -1) (undo-tree-id1772 . -1) (undo-tree-id1773 . -1) (undo-tree-id1774 . -1)) nil (25182 26474 184565 755000) 0 nil])
([nil nil ((#("      
" 0 6 (fontified t) 6 7 (fontified t)) . 3261) (undo-tree-id1766 . -7) (undo-tree-id1767 . -7) (undo-tree-id1768 . -7) (undo-tree-id1769 . -6) (undo-tree-id1770 . -7)) nil (25182 26474 184557 981000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 3259) (#(" " 0 1 (fontified t)) . 3259) (#(" " 0 1 (fontified t)) . 3259) (#(" " 0 1 (fontified t)) . 3259) (#(" " 0 1 (fontified t)) . 3259) (undo-tree-id1762 . -1) (undo-tree-id1763 . -1) (undo-tree-id1764 . -1) (undo-tree-id1765 . -1) (#(" " 0 1 (fontified t)) . 3259)) nil (25182 26474 184547 90000) 0 nil])
([nil nil ((#("  
" 0 2 (fontified t) 2 3 (fontified t)) . 3335) (undo-tree-id1751 . -2) (undo-tree-id1752 . -3) (undo-tree-id1753 . -3) (undo-tree-id1754 . -3) (undo-tree-id1755 . -2) (undo-tree-id1756 . -2) (undo-tree-id1757 . -2) (undo-tree-id1758 . -2) (undo-tree-id1759 . -2) (undo-tree-id1760 . -2) (undo-tree-id1761 . -3)) nil (25182 26474 184535 589000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 3335) (#(" " 0 1 (fontified t)) . 3335) (#(" " 0 1 (fontified t)) . 3335)) nil (25182 26474 184505 953000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 3335)) nil (25182 26474 184498 790000) 0 nil])
([nil nil ((3097 . 3183) (#("    if number |> to_charlist |> length != 10 or !String.starts_with?(number,\"53\") do
" 0 4 (fontified t) 4 5 (fontified t face font-lock-keyword-face) 5 6 (fontified t face font-lock-keyword-face) 6 7 (fontified t) 7 32 (fontified t) 32 38 (fontified t) 38 40 (fontified t) 40 41 (fontified t) 41 42 (fontified t) 42 45 (fontified t) 45 47 (fontified t face font-lock-keyword-face) 47 48 (fontified t) 48 49 (fontified t) 49 55 (fontified t) 55 69 (fontified t) 69 76 (fontified t) 76 77 (fontified t syntax-table (15) face font-lock-string-face) 77 79 (fontified t face font-lock-string-face) 79 80 (fontified t syntax-table (15) face font-lock-string-face) 80 81 (fontified t rear-nonsticky t) 81 82 (fontified t) 82 84 (fontified t face font-lock-keyword-face) 84 85 (fontified t)) . -3097) (undo-tree-id1817 . -85) (undo-tree-id1818 . -85) (undo-tree-id1819 . -48) (t 25182 26474 223092 899000)) nil (25182 26484 8704 126000) 0 nil])
([nil nil ((#("!" 0 1 (fontified t)) . -3145) (undo-tree-id1820 . -1) 3146 (t 25182 26484 23066 627000)) nil (25182 26522 132684 537000) 0 nil])
([nil nil ((#("      # {:ok, cuerpo_respuesta} = Jason.decode(res.body)

      # if Regex.match?(~r/^(10|20|30[0-9])/,List.first(cuerpo_respuesta[\"result\"])[\"code\"]) do
      #  Logger.info(\"Bonsai SMS Delivery Response; #{res.body}\")
      #  Jason.decode(res.body)
      # else
      #  Logger.error(\"Bonsaif SMS Delivery Error\": \"#{res.body}\")
      #  Jason.decode(res.body)
      # end
      # else
      # Logger.error(\"Bonsaif Response: #{res.body}\")
      # {:error, res.body}" 0 6 (fontified t) 6 8 (fontified t face font-lock-comment-delimiter-face) 8 57 (fontified t face font-lock-comment-face) 57 58 (fontified t) 58 64 (fontified t) 64 66 (fontified t face font-lock-comment-delimiter-face) 66 131 (fontified t face font-lock-comment-face) 131 132 (syntax-table (15) fontified t face font-lock-comment-face) 132 138 (fontified t face font-lock-comment-face) 138 139 (syntax-table (15) fontified t face font-lock-comment-face) 139 142 (fontified t face font-lock-comment-face) 142 143 (syntax-table (15) fontified t face font-lock-comment-face) 143 147 (fontified t face font-lock-comment-face) 147 148 (syntax-table (15) fontified t face font-lock-comment-face) 148 154 (fontified t face font-lock-comment-face) 154 160 (fontified t) 160 163 (fontified t face font-lock-comment-delimiter-face) 163 175 (fontified t face font-lock-comment-face) 175 176 (syntax-table (15) fontified t face font-lock-comment-face) 176 206 (fontified t face font-lock-comment-face) 206 207 (elixir-interpolation (nil #<marker at 2251 in medusa_bonsaif_adapter.ex> #<marker at 2251 in medusa_bonsaif_adapter.ex> #<marker at 2251 in medusa_bonsaif_adapter.ex> #<marker at 2251 in medusa_bonsaif_adapter.ex>) syntax-table (2) fontified t face font-lock-comment-face) 207 217 (fontified t face font-lock-comment-face) 217 218 (syntax-table (15) fontified t face font-lock-comment-face) 218 220 (fontified t face font-lock-comment-face) 220 226 (fontified t) 226 229 (fontified t face font-lock-comment-delimiter-face) 229 240 (fontified t face font-lock-comment-face) 240 252 (face font-lock-comment-face fontified t) 252 258 (fontified t) 258 260 (fontified t face font-lock-comment-delimiter-face) 260 265 (fontified t face font-lock-comment-face) 265 271 (fontified t) 271 274 (fontified t face font-lock-comment-delimiter-face) 274 287 (fontified t face font-lock-comment-face) 287 288 (syntax-table (15) fontified t face font-lock-comment-face) 288 314 (fontified t face font-lock-comment-face) 314 315 (syntax-table (15) fontified t face font-lock-comment-face) 315 317 (fontified t face font-lock-comment-face) 317 318 (syntax-table (15) fontified t face font-lock-comment-face) 318 319 (elixir-interpolation (nil #<marker at 2251 in medusa_bonsaif_adapter.ex> #<marker at 2251 in medusa_bonsaif_adapter.ex> #<marker at 2251 in medusa_bonsaif_adapter.ex> #<marker at 2251 in medusa_bonsaif_adapter.ex>) syntax-table (2) fontified t face font-lock-comment-face) 319 327 (fontified t face font-lock-comment-face) 327 329 (fontified t face font-lock-comment-face) 329 330 (syntax-table (15) fontified t face font-lock-comment-face) 330 332 (fontified t face font-lock-comment-face) 332 338 (fontified t) 338 341 (fontified t face font-lock-comment-delimiter-face) 341 364 (fontified t face font-lock-comment-face) 364 370 (fontified t) 370 372 (fontified t face font-lock-comment-delimiter-face) 372 376 (fontified t face font-lock-comment-face) 376 382 (fontified t) 382 384 (fontified t face font-lock-comment-delimiter-face) 384 389 (fontified t face font-lock-comment-face) 389 391 (fontified t) 391 395 (fontified t) 395 397 (fontified t face font-lock-comment-delimiter-face) 397 410 (fontified t face font-lock-comment-face) 410 411 (syntax-table (15) fontified t face font-lock-comment-face) 411 429 (fontified t face font-lock-comment-face) 429 430 (elixir-interpolation (nil #<marker at 2251 in medusa_bonsaif_adapter.ex> #<marker at 2251 in medusa_bonsaif_adapter.ex> #<marker at 2251 in medusa_bonsaif_adapter.ex> #<marker at 2251 in medusa_bonsaif_adapter.ex>) syntax-table (2) fontified t face font-lock-comment-face) 430 440 (fontified t face font-lock-comment-face) 440 441 (syntax-table (15) fontified t face font-lock-comment-face) 441 443 (fontified t face font-lock-comment-face) 443 449 (fontified t) 449 451 (fontified t face font-lock-comment-delimiter-face) 451 469 (fontified t face font-lock-comment-face)) . -2334) (undo-tree-id1825 . -252) (undo-tree-id1826 . -252) (undo-tree-id1827 . -443) (undo-tree-id1828 . -443) (undo-tree-id1829 . -389) (undo-tree-id1830 . -389) (undo-tree-id1831 . -58) (undo-tree-id1832 . -58) (undo-tree-id1833 . -154) (undo-tree-id1834 . -154) (undo-tree-id1835 . -220) (undo-tree-id1836 . -220) (undo-tree-id1837 . -265) (undo-tree-id1838 . -265) (undo-tree-id1839 . -332) (undo-tree-id1840 . -332) (undo-tree-id1841 . -376) (undo-tree-id1842 . -376) (undo-tree-id1843 . -429) (undo-tree-id1844 . -440) (undo-tree-id1845 . -429) (undo-tree-id1846 . -440) (undo-tree-id1847 . -364) (undo-tree-id1848 . -364) (undo-tree-id1849 . -364) (undo-tree-id1850 . -364) (undo-tree-id1851 . -364) (undo-tree-id1852 . -364) (undo-tree-id1853 . -364) (undo-tree-id1854 . -364) (undo-tree-id1855 . -206) (undo-tree-id1856 . -217) (undo-tree-id1857 . -206) (undo-tree-id1858 . -217) (undo-tree-id1859 . -318) (undo-tree-id1860 . -329) (undo-tree-id1861 . -318) (undo-tree-id1862 . -329) (undo-tree-id1863 . -429) (undo-tree-id1864 . -440) (undo-tree-id1865 . -429) (undo-tree-id1866 . -440) (undo-tree-id1867 . -443) (undo-tree-id1868 . -364) (undo-tree-id1869 . -364) (undo-tree-id1870 . -57) (undo-tree-id1871 . -57) (undo-tree-id1872 . -469) (undo-tree-id1873 . -469) (undo-tree-id1874 . 1) (undo-tree-id1875 . -469) (undo-tree-id1876 . 18) (undo-tree-id1877 . -452) 2803 (t 25182 26522 146967 134000)) nil (25182 26656 930930 434000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 2334) (undo-tree-id1821 . -1) (undo-tree-id1822 . -1) (undo-tree-id1823 . -1) (undo-tree-id1824 . -1)) nil (25182 26656 930855 13000) 0 nil])
([nil nil ((1999 . 2000)) nil (25182 26656 930828 834000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 2074) (undo-tree-id1889 . -1) (undo-tree-id1890 . -1) (undo-tree-id1891 . -1) (undo-tree-id1892 . -1) (undo-tree-id1893 . -1) (t 25182 26656 946645 934000)) nil (25182 26869 568034 488000) 0 nil])
([nil nil ((#("    #     with {:true,Regex.match?(~r/^(10|20|30[0-9])/, \"#{res.status_code}\")} <-" 0 4 (fontified t) 4 10 (fontified t face font-lock-comment-delimiter-face) 10 57 (fontified t face font-lock-comment-face) 57 58 (fontified t syntax-table (15) face font-lock-comment-face) 58 59 (elixir-interpolation (nil #<marker at 2074 in medusa_bonsaif_adapter.ex> #<marker at 2074 in medusa_bonsaif_adapter.ex> #<marker at 2074 in medusa_bonsaif_adapter.ex> #<marker at 2074 in medusa_bonsaif_adapter.ex>) fontified t syntax-table (2) face font-lock-comment-face) 59 76 (fontified t face font-lock-comment-face) 76 77 (fontified t syntax-table (15) face font-lock-comment-face) 77 82 (fontified t face font-lock-comment-face)) . 2074) (undo-tree-id1881 . -58) (undo-tree-id1882 . -76) (undo-tree-id1883 . -58) (undo-tree-id1884 . -76) (undo-tree-id1885 . -58) (undo-tree-id1886 . -76) (undo-tree-id1887 . -58) (undo-tree-id1888 . -76)) nil (25182 26869 568029 368000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 2074) (undo-tree-id1880 . -1)) nil (25182 26869 568021 444000) 0 nil])
([nil nil ((2620 . 2621)) nil (25182 26869 568019 760000) 0 nil])
([nil nil ((#("{" 0 1 (fontified t)) . -2620) (undo-tree-id1879 . -1) 2621) nil (25182 26869 568018 498000) 0 nil])
([nil nil ((2620 . 2621)) nil (25182 26869 568016 364000) 0 nil])
([nil nil ((2625 . 2626)) nil (25182 26869 568015 623000) 0 nil])
([nil nil ((2592 . 2593)) nil (25182 26869 568014 881000) 0 nil])
([nil nil ((#("3" 0 1 (fontified t face font-lock-string-face)) . -2624) (undo-tree-id1878 . -1) 2625) nil (25182 26869 568013 228000) 0 nil])
([nil nil ((2624 . 2626)) nil (25182 26869 568003 59000) 0 nil])
([nil nil ((2626 . 2630)) nil (25182 26869 568001 997000) 0 nil])
([nil nil ((2626 . 2627)) nil (25182 26869 568001 166000) 0 nil])
([nil nil ((2628 . 2629)) nil (25182 26869 568000 174000) 0 nil])
([nil nil ((2633 . 2634)) nil (25182 26869 567999 392000) 0 nil])
([nil nil ((2634 . 2636)) nil (25182 26869 567998 230000) 0 nil])
([nil nil ((2635 . 2638)) nil (25182 26869 567993 932000) 0 nil])
([nil nil ((#("defp check_sms_codes(sms_codes) do
    sms_codes
  end
" 0 4 (fontified t face font-lock-keyword-face) 4 5 (fontified t) 5 20 (fontified t face font-lock-function-name-face) 20 29 (fontified t) 29 32 (fontified t) 32 34 (fontified t face font-lock-keyword-face) 34 35 (fontified t) 35 51 (fontified t) 51 54 (fontified t face font-lock-keyword-face) 54 55 (fontified t)) . -2427) (undo-tree-id1894 . -55) (undo-tree-id1895 . -35) (undo-tree-id1896 . -35) (undo-tree-id1897 . -49) (undo-tree-id1898 . -49) (undo-tree-id1899 . -55) (undo-tree-id1900 . -55) (undo-tree-id1901 . -55) (undo-tree-id1902 . -54) (undo-tree-id1903 . -55) 2482 (t 25182 26869 578215 258000)) nil (25182 26935 95581 400000) 0 nil])
([nil nil ((2265 . 2266)) nil (25182 26935 95552 174000) 0 nil])
([nil nil ((2267 . 2268)) nil (25182 26935 95550 171000) 0 nil])
([nil nil ((2317 . 2318)) nil (25182 26935 95548 107000) 0 nil])
([nil nil ((2384 . 2385)) nil (25182 26935 95545 181000) 0 nil])
([nil nil ((2422 . 2423)) nil (25182 26935 95538 598000) 0 nil])
([nil nil ((2578 . 2580) (t 25182 26935 112841 793000)) nil (25182 26976 361533 634000) 0 nil])
([nil nil ((2579 . 2582)) nil (25182 26976 361531 671000) 0 nil])
([nil current ((2583 . 2584)) nil (25182 26976 361527 563000) 0 nil])
nil
